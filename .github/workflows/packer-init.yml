name: Packer

on:
  push:
    branches: [ main ]

jobs:
  packer:
    name: packer validate and build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16

      # zip artifacts
      - name: Zipping artifacts
        run: zip -r webapp.zip ./

      # validate templates
      - name: Validate Template
        uses: hashicorp/packer-github-actions@master
        with:
          command: validate
          target: webapp.pkr.hcl
          args: -var-file='variables.pkrvars.hcl'

      # build artifact
      - name: Build Artifact
        uses: hashicorp/packer-github-actions@master
        with:
          command: build
          target: webapp.pkr.hcl
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Print manifest json
        run: cat manifest.json | jq '.'

      - name: Set AWS Credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }} --profile dev
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }} --profile dev
          aws configure set region us-east-1 --profile dev

          aws configure set aws_access_key_id ${{ secrets.DEMO_ACCESS_KEY }} --profile demo
          aws configure set aws_secret_access_key ${{ secrets.DEMO_SECRET_KEY }}  --profile demo
          aws configure set region us-east-1  --profile demo

      - name: Fetch AMI ID New
        run:
          export AMI_ID=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d ":" -f2);
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV;

      - name: Fetching version no.
        run:
          export VERSION_ID=$(aws --profile demo ec2 describe-launch-templates --launch-template-names launch-config | jq -r '.LaunchTemplates[-1].LatestVersionNumber');
          echo "VERSION_ID=$VERSION_ID" >> $GITHUB_ENV;

      - name: Upgrade version no.
        run: VERSION_TO_UPDATE=${{ env.VERSION_ID }};
          VERSION_TO_UPDATE1=$VERSION_TO_UPDATE;
          export NEW_VERSION=$((VERSION_TO_UPDATE1++));
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV;

      - name: Create Launch Template
        run:
          aws --profile demo ec2 create-launch-template-version --launch-template-name launch-config --version-description ${{ env.NEW_VERSION }} --source-version 1 --launch-template-data "ImageId=${{ env.AMI_ID }}" > launch_template.json;
          cat launch_template.json | jq '.';

      - name: Fetching autoscaling group name
        run:
          export AUTOSCALING_GROUP_NAME=$(aws --profile demo autoscaling describe-auto-scaling-groups | jq -r '.AutoScalingGroups[-1].AutoScalingGroupName');
          echo "AUTOSCALING_GROUP_NAME=$AUTOSCALING_GROUP_NAME" >> $GITHUB_ENV;

      - name: Update Auto Scaling Group with latest version
        run: aws --profile demo autoscaling update-auto-scaling-group --auto-scaling-group-name ${{ env.AUTOSCALING_GROUP_NAME }} --launch-template LaunchTemplateName=launch-config,Version='$Latest';

      - name: Refresh Instance in Auto Scaling Group
        run: aws --profile demo autoscaling start-instance-refresh --auto-scaling-group-name ${{ env.AUTOSCALING_GROUP_NAME }}

   


          
